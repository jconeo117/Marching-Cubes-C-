
#pragma kernel March

#include "Includes\MarchingTable.hlsl"

RWStructuredBuffer<float> _weights;
int _chunksize;
float _isolevel;

struct Triangle
{
    float3 a, b, c;
};

AppendStructuredBuffer<Triangle> _triangles;

static const uint Numthreads = 8;

float3 interp(float3 VertexEdge1, float edgeValue1, float3 VertexEdge2, float edgeValue2)
{
    return (VertexEdge1 + (_isolevel - edgeValue1) * (VertexEdge2 - VertexEdge1) / (edgeValue2 - edgeValue1));
}

int indexFromCoord(int x, int y, int z)
{
    return x + _chunksize * (y + _chunksize * z);
}


[numthreads(Numthreads,Numthreads,Numthreads)]
void March (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _chunksize - 1 || id.y >= _chunksize - 1 || id.z >= _chunksize - 1)
    {
        return;
    }

    
    float CubesValues[8];
    CubesValues[0] = _weights[indexFromCoord(id.x, id.y, id.z + 1)];
    CubesValues[1] = _weights[indexFromCoord(id.x + 1, id.y, id.z + 1)];
    CubesValues[2] = _weights[indexFromCoord(id.x + 1, id.y, id.z)];
    CubesValues[3] = _weights[indexFromCoord(id.x, id.y, id.z)];
    CubesValues[4] = _weights[indexFromCoord(id.x, id.y + 1, id.z + 1)];
    CubesValues[5] = _weights[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)];
    CubesValues[6] = _weights[indexFromCoord(id.x + 1, id.y + 1, id.z)];
    CubesValues[7] = _weights[indexFromCoord(id.x, id.y + 1, id.z)];
    
    int CubeIndex = 0;
    for (int i = 0; i < 8; i++)
    {
        if (CubesValues[i] < _isolevel)
        {
            CubeIndex |= (1 << i);
        }
    }
    
    int edges[] = triTable[CubeIndex];
    for (int i = 0; edges[i] != -1; i += 3)
    {
        Triangle tri;
        tri.a = interp(cornerOffsets[edgeConnections[edges[i]][0]], CubesValues[edgeConnections[edges[i]][0]],
                       cornerOffsets[edgeConnections[edges[i]][1]], CubesValues[edgeConnections[edges[i]][1]]) + id;

        tri.b = interp(cornerOffsets[edgeConnections[edges[i + 1]][0]], CubesValues[edgeConnections[edges[i + 1]][0]],
                       cornerOffsets[edgeConnections[edges[i + 1]][1]], CubesValues[edgeConnections[edges[i + 1]][1]]) + id;

        tri.c = interp(cornerOffsets[edgeConnections[edges[i + 2]][0]], CubesValues[edgeConnections[edges[i + 2]][0]],
                       cornerOffsets[edgeConnections[edges[i + 2]][1]], CubesValues[edgeConnections[edges[i + 2]][1]]) + id;

        _triangles.Append(tri);
    }

}
